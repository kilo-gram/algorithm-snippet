{
	// writer : kilogram
	// creating time : 2025-08-06
	
	"PS": {
		"prefix": "ps",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;\n",
			"typedef long long ll;\n",
			"int main()",
			"{",
			"\tios::sync_with_stdio(false);",
			"\tcin.tie(nullptr);\n",
			"\t$0",
			"\treturn 0;",
			"}",
		],
		"description": "Log output to console"
	},

	"DSU": {
		"prefix": "dsu",
		"body": [
			"struct DSU {",
			"\tvector<int> par, rnk, sz;",
			"\tint c;",
			"\tDSU(int n) : par(n + 1), rnk(n + 1, 0), sz(n + 1, 1), c(n) {",
			"\t\tfor (int i = 1; i <= n; ++i) par[i] = i;",
			"\t}",
			"\tint find(int i) {",
			"\t\treturn (par[i] == i ? i : (par[i] = find(par[i])));",
			"\t}",
			"\tbool same(int i, int j) {",
			"\t\treturn find(i) == find(j);",
			"\t}",
			"\tint get_size(int i) {",
			"\t\treturn sz[find(i)];",
			"\t}",
			"\tint count() {",
			"\t\treturn c;",
			"\t}",
			"\tint unite(int i, int j) {",
			"\t\tif ((i = find(i)) == (j = find(j))) return -1;",
			"\t\telse --c;",
			"\t\tif (rnk[i] > rnk[j]) swap(i, j);",
			"\t\tpar[i] = j;",
			"\t\tsz[j] += sz[i];",
			"\t\tif (rnk[i] == rnk[j]) rnk[j]++;",
			"\t\treturn j;",
			"\t}",
			"};",
		],
		"description": "Disjoint Set union"
	},

	"Fenwick tree (BIT)": {
		"prefix": "fenwick",
		"body": [
			"template <class T>",
			"struct fenwick { //1-indexed",
			"\tint n; vector<T> t;",
			"\tfenwick() {}",
			"\tfenwick(int _n) {",
			"\t\tn = _n; t.assign(n + 1, 0);",
			"\t}",
			"\tT query(int i) {",
			"\t\tT ans = 0;",
			"\t\tfor (; i >= 1; i -= (i & -i)) ans += t[i];",
			"\t\treturn ans;",
			"\t}",
			"\tvoid upd(int i, T val) {",
			"\t\tif (i <= 0) return;",
			"\t\tfor (; i <= n; i += (i & -i)) t[i] += val;",
			"\t}",
			"\tvoid upd(int l, int r, T val) {",
			"\t\tupd(l, val);",
			"\t\tupd(r + 1, -val);",
			"\t}",
			"\tT query(int l, int r) {",
			"\t\treturn query(r) - query(l - 1);",
			"\t}",
			"};",
		],
		"description": "Fenwick tree = Binary indexed tree"
	},

	"Segment tree": {
		"prefix": "seg",
		"body": [
			"const int N = 3e5 + 9;",
			"",
			"int a[N];",
			"struct ST {",
			"\tint t[4 * N];",
			"\tstatic const int inf = 1e9;",
			"\tST() {",
			"\t\tmemset(t, 0, sizeof t);",
			"\t}",
			"\tvoid build(int n, int b, int e) {",
			"\t\tif (b == e) {",
			"\t\t\tt[n] = a[b];",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tbuild(l, b, mid);",
			"\t\tbuild(r, mid + 1, e);",
			"\t\tt[n] = max(t[l], t[r]);",
			"\t}",
			"\tvoid upd(int n, int b, int e, int i, int x) {",
			"\t\tif (b > i || e < i) return;",
			"\t\tif (b == e && b == i) {",
			"\t\t\tt[n] = x;",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tupd(l, b, mid, i, x);",
			"\t\tupd(r, mid + 1, e, i, x);",
			"\t\tt[n] = max(t[l], t[r]);",
			"\t}",
			"\tint query(int n, int b, int e, int i, int j) {",
			"\t\tif (b > j || e < i) return -inf;",
			"\t\tif (b >= i && e <= j) return t[n];",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tint L = query(l, b, mid, i, j);",
			"\t\tint R = query(r, mid + 1, e, i, j);",
			"\t\treturn max(L, R);",
			"\t}",
			"}t;",
		],
		"description": "Segment tree"
	},
	
	"Digit DP": {
		"prefix": "digit_dp",
		"body": [
			"vector<int> num;",
			"int a, b, d, k;",
			"int DP[12][12][2];",
			"",
			"int find(int pos, int cnt, int f) {",
			"\tif (cnt > k) return 0;",
			"",
			"\tif (pos == num.size()) {",
			"\t\tif (cnt == k) return 1;",
			"\t\treturn 0;",
			"\t}",
			"",
			"\tif (DP[pos][cnt][f] != -1) return DP[pos][cnt][f];",
			"\tint res = 0;",
			"",
			"\tint LMT;",
			"",
			"\t// f ? (greater than b) : (already smaller than b)",
			"\tif (f == 0) LMT = num[pos];",
			"\telse LMT = 9;",
			"",
			"\tfor (int dgt = 0; dgt <= LMT; dgt++) {",
			"\t\tint nf = f;",
			"\t\tint ncnt = cnt;",
			"\t\tif (f == 0 && dgt < LMT) nf = 1; /// The number is getting smaller at this position",
			"\t\tif (dgt == d) ncnt++;",
			"\t\tif (ncnt <= k) res += find(pos + 1, ncnt, nf);",
			"\t}",
			"",
			"\treturn DP[pos][cnt][f] = res;",
			"}",
			"",
			"int digitcount(int b) {",
			"\tnum.clear();",
			"\twhile(b > 0) {",
			"\t\tnum.push_back(b % 10);",
			"\t\tb /= 10;",
			"\t}",
			"\treverse(num.begin(), num.end());",
			"",
			"\tmemset(DP, -1, sizeof(DP));",
			"\tint res = find(0, 0, 0);",
			"\treturn res;",
			"}",
		],
		"description": "Digit DP"
	},

	"topological sorting": {
		"prefix": "topological_sorting",
		"body": [
			"const int N = 1e5 + 9;",
			"vector<int> g[N];",
			"bool vi[N];",
			"vector<int> ord;",
			"void dfs(int u) {",
			"\tvi[u] = true;",
			"\tfor (auto v : g[u]) {",
			"\t\tif (!vi[v]) {",
			"\t\t\tdfs(v);",
			"\t\t}",
			"\t}",
			"\tord.push_back(u);",
			"}",
			"",
			"void find(int n) {",
			"\tfor (int i = 1; i <= n; i++) {",
			"\t\tif (!vi[i]) {",
			"\t\t\tdfs(i);",
			"\t\t}",
			"\t}",
			"\treverse(ord.begin(), ord.end());",
			"",
			"\t// check is feasible",
			"\tvector<int> pos(n + 1);",
			"\tfor (int i = 0; i < (int) ord.size(); i++) {",
			"\t\tpos[ord[i]] = i;",
			"\t}",
			"\tfor (int u = 1; u <= n; u++) {",
			"\t\tfor (auto v : g[u]) {",
			"\t\t\t// We need to consider self loops too!",
			"\t\t\tif (pos[u] >= pos[v]) { ",
			"\t\t\t\t//print impossible",
			"\t\t\t\treturn;",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\t// print the order",
			"\tfor (auto u : ord) cout << u << ' ';",
			"}",
		],
		"description": "topological sorting"
	},

	"DFS_tree": {
		"prefix": "dfs_tree",
		"body": [
			"const int N = 3e5 + 5;",
			"",
			"int bridge = 0;",
			"vector<int> adj[N];",
			"int lv[N];",
			"int dp[N];",
			"",
			"void dfs (int v) {",
			"\tdp[v] = 0;",
			"\tfor (int u : adj[v]) {",
			"\t\tif (lv[u] == 0) {",
			"\t\t\tlv[u] = lv[v] + 1;",
			"\t\t\tdfs(u);",
			"\t\t\tdp[v] += dp[u];",
			"\t\t} else if (lv[u] < lv[v]) {",
			"\t\t\tdp[v]++;",
			"\t\t} else if (lv[u] > lv[v]) {",
			"\t\t\tdp[v]--;",
			"\t\t}",
			"\t}",
			"",
			"\tdp[v]--;",
			"",
			"\tif (lv[v] > 1 && dp[v] == 0) {",
			"\t\tbridge++;",
			"\t}",
			"}",
		],
		"description": "classical dfs tree implementation"
	},

	"cycle detection": {
		"prefix": "cycle detection",
		"body": [
			"// when you add edge in g, you need to use this implementation g[vertex1].push_back({vertex2, index})",
			"const int N = 5e5 + 9;",
			"",
			"vector<pair<int, int>> g[N];",
			"int vis[N], par[N], e_id[N];",
			"vector<int> cycle; // simple cycle, contains edge ids",
			"",
			"bool dfs(int u) {",
			"\tif (!cycle.empty()) return 1;",
			"\tvis[u] = 1;",
			"\tfor (auto [v, id] : g[u]) {",
			"\t\tif (v != par[u]) {",
			"\t\t\tif (vis[v] == 0) {",
			"\t\t\t\tpar[v] = u;",
			"\t\t\t\te_id[v] = id;",
			"\t\t\t\tif (dfs(v)) return 1;",
			"\t\t\t}",
			"\t\t\telse if (vis[v] == 1) {",
			"\t\t\t\t// cycle here",
			"\t\t\t\tcycle.push_back(id);",
			"\t\t\t\tfor (int x = u; x != v; x = par[x]) {",
			"\t\t\t\t\tcycle.push_back(e_id[x]);",
			"\t\t\t\t}",
			"\t\t\t\treturn 1;",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tvis[u] = 2;",
			"\treturn 0;",
			"}",

			"void findcycle(int n) {",
			"\tfor (int u = 0; u < n; u++) {",
			"\t\tif (vis[u] == 0 && dfs(u)) {",
			"\t\t\t// this graph is acyclic",
			"\t\t\tfor (auto x : cycle) {",
			"\t\t\t\t// any cycle",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "cycle detection"
	},

	"Binary Lifting and lowest common ancester": {
		"prefix": "lca",
		"body": [
			"const int N = 3e5 + 9, LG = 18;",
			"",
			"vector<int> g[N];",
			"int par[N][LG + 1], dep[N], sz[N];",
			"// don't forget to call dfs(1)",
			"void dfs(int u, int p = 0) {",
			"\tpar[u][0] = p;",
			"\tdep[u] = dep[p] + 1;",
			"\tsz[u] = 1;",
			"\tfor (int i = 1; i <= LG; i++) par[u][i] = par[par[u][i - 1]][i - 1];",
			"\tfor (auto v : g[u]) {",
			"\t\tif (v != p) {",
			"\t\t\tdfs(v, u);",
			"\t\t\tsz[u] += sz[v];",
			"\t\t}",
			"\t}",
			"}",
			"int lca(int u, int v) {",
			"\tif (dep[u] < dep[v]) swap(u, v);",
			"\tfor (int k = LG; k >= 0; k--) if (dep[par[u][k]] >= dep[v]) u = par[u][k];",
			"\tif (u == v) return u;",
			"\tfor (int k = LG; k >= 0; k--) if (par[u][k] != par[v][k]) u = par[u][k], v = par[v][k];",
			"\treturn par[u][0];",
			"}",
			"// 'kth'function is a Binary Lifting",
			"int kth(int u, int k) {",
			"\tassert(k >= 0);",
			"\tfor (int i = 0; i <= LG; i++) if (k & (1 << i)) u = par[u][i];",
			"\treturn u;",
			"}",
			"int dist(int u, int v) {",
			"\tint l = lca(u, v);",
			"\treturn dep[u] + dep[v] - (dep[l] << 1);",
			"}",
			"//kth node from u to v, 0th node is u",
			"int go(int u, int v, int k) {",
			"\tint l = lca(u, v);",
			"\tint d = dep[u] + dep[v] - (dep[l] << 1);",
			"\tassert(k <= d);",
			"\tif (dep[l] + k <= dep[u]) return kth(u, k);",
			"\tk -= dep[u] - dep[l];",
			"\treturn kth(v, dep[v] - dep[l] - k);",
			"}",
		],
		"description": "Binary Lifting and lowest common ancester"
	},

}