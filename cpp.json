{
	// writer : kilogram
	// creating time : 2025-08-06
	// last update : 2025-08-06
	"PS": {
		"prefix": "ps",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;\n",
			"typedef long long ll;\n",
			"int main()",
			"{",
			"\tios::sync_with_stdio(false);",
			"\tcin.tie(nullptr);\n",
			"\t$0",
			"\treturn 0;",
			"}",
		],
		"description": "Log output to console"
	},

	"DSU": {
		"prefix": "dsu",
		"body": [
			"struct DSU {",
			"\tvector<int> par, rnk, sz;",
			"\tint c;",
			"\tDSU(int n) : par(n + 1), rnk(n + 1, 0), sz(n + 1, 1), c(n) {",
			"\t\tfor (int i = 1; i <= n; ++i) par[i] = i;",
			"\t}",
			"\tint find(int i) {",
			"\t\treturn (par[i] == i ? i : (par[i] = find(par[i])));",
			"\t}",
			"\tbool same(int i, int j) {",
			"\t\treturn find(i) == find(j);",
			"\t}",
			"\tint get_size(int i) {",
			"\t\treturn sz[find(i)];",
			"\t}",
			"\tint count() {",
			"\t\treturn c;",
			"\t}",
			"\tint unite(int i, int j) {",
			"\t\tif ((i = find(i)) == (j = find(j))) return -1;",
			"\t\telse --c;",
			"\t\tif (rnk[i] > rnk[j]) swap(i, j);",
			"\t\tpar[i] = j;",
			"\t\tsz[j] += sz[i];",
			"\t\tif (rnk[i] == rnk[j]) rnk[j]++;",
			"\t\treturn j;",
			"\t}",
			"};",
		],
		"description": "Disjoint Set union"
	},

	"Fenwick tree (BIT)": {
		"prefix": "fenwick",
		"body": [
			"template <class T>",
			"struct fenwick { //1-indexed",
			"\tint n; vector<T> t;",
			"\tfenwick() {}",
			"\tfenwick(int _n) {",
			"\t\tn = _n; t.assign(n + 1, 0);",
			"\t}",
			"\tT query(int i) {",
			"\t\tT ans = 0;",
			"\t\tfor (; i >= 1; i -= (i & -i)) ans += t[i];",
			"\t\treturn ans;",
			"\t}",
			"\tvoid upd(int i, T val) {",
			"\t\tif (i <= 0) return;",
			"\t\tfor (; i <= n; i += (i & -i)) t[i] += val;",
			"\t}",
			"\tvoid upd(int l, int r, T val) {",
			"\t\tupd(l, val);",
			"\t\tupd(r + 1, -val);",
			"\t}",
			"\tT query(int l, int r) {",
			"\t\treturn query(r) - query(l - 1);",
			"\t}",
			"};",
		],
		"description": "Fenwick tree = Binary indexed tree"
	},

	"Segment tree": {
		"prefix": "seg",
		"body": [
			"const int N = 3e5 + 9;",
			"",
			"int a[N];",
			"struct ST {",
			"\tint t[4 * N];",
			"\tstatic const int inf = 1e9;",
			"\tST() {",
			"\t\tmemset(t, 0, sizeof t);",
			"\t}",
			"\tvoid build(int n, int b, int e) {",
			"\t\tif (b == e) {",
			"\t\t\tt[n] = a[b];",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tbuild(l, b, mid);",
			"\t\tbuild(r, mid + 1, e);",
			"\t\tt[n] = max(t[l], t[r]);",
			"\t}",
			"\tvoid upd(int n, int b, int e, int i, int x) {",
			"\t\tif (b > i || e < i) return;",
			"\t\tif (b == e && b == i) {",
			"\t\t\tt[n] = x;",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tupd(l, b, mid, i, x);",
			"\t\tupd(r, mid + 1, e, i, x);",
			"\t\tt[n] = max(t[l], t[r]);",
			"\t}",
			"\tint query(int n, int b, int e, int i, int j) {",
			"\t\tif (b > j || e < i) return -inf;",
			"\t\tif (b >= i && e <= j) return t[n];",
			"\t\tint mid = (b + e) >> 1, l = n << 1, r = l | 1;",
			"\t\tint L = query(l, b, mid, i, j);",
			"\t\tint R = query(r, mid + 1, e, i, j);",
			"\t\treturn max(L, R);",
			"\t}",
			"}t;",
		],
		"description": "Segment tree"
	},
	
	
}